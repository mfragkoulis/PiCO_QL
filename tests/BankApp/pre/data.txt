
Vector
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    vector<Account> accounts;
    accounts.push_back(acc1);
    accounts.push_back(acc2);
    data = (void *)&accounts;

Deque
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    deque<Account> accounts;
    accounts.push_back(acc1);
    accounts.push_back(acc2);
    data = (void *)&accounts;

List
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    list<Account> accounts;
    accounts.push_back(acc1);
    accounts.push_back(acc2);
    data = (void *)&accounts;

Bit_vector
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
??    bit_vector<bool> accounts;
    accounts.push_back(acc1);
    accounts.push_back(acc2);
    data = (void *)&accounts;

struct classcomp{

    bool operator() (const Account& ac1, const Account&	ac2) const{
    return (ac1.get_balance()<ac2.get_balance());
    }
};


Set
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    set<Account,classcomp> accounts;
    accounts.insert(acc1);
    accounts.insert(acc2);
    data = (void *)&accounts;

Multiset
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    multiset<Account> accounts;
    accounts.insert(acc1);
    accounts.insert(acc1);
    data = (void *)&accounts;

Map
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    map<string,Account> accounts;
    accounts.insert(make_pair("0", acc1));
    accounts.insert(make_pair("1", acc2));
    data = (void *)&accounts;

Multimap
    Account acc1("10068", 500.0);
    Account acc2("10234", 394.28);
    multimap<string,Account> accounts;
    accounts.insert(make_pair("1", acc1));
    accounts.insert(make_pair("1", acc2));
    data = (void *)&accounts;

